<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Sistema de Ofertas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="/dashboard">
                                <i class="fas fa-chart-bar"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/enviar">
                                <i class="fas fa-paper-plane"></i> Enviar Ofertas
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/campaigns">
                                <i class="fas fa-bullhorn"></i> Campañas
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2"><i class="fas fa-chart-bar"></i> Dashboard</h1>
                    <span id="systemClock" class="badge bg-dark fs-6"></span>
                </div>
                <script>
                    function updateClock() {
                        const now = new Date();
                        const options = {
                            year: 'numeric', month: '2-digit', day: '2-digit',
                            hour: '2-digit', minute: '2-digit', second: '2-digit',
                            hour12: true,
                        };
                        document.getElementById('systemClock').textContent = now.toLocaleString('es-MX', options);
                    }
                    setInterval(updateClock, 1000);
                    updateClock();
                </script>

                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body">
                                <h5 class="card-title">Total Enviados</h5>
                                <h2 class="card-text" id="totalSent">0</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body">
                                <h5 class="card-title">Abiertos</h5>
                                <h2 class="card-text" id="totalOpened">0</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body">
                                <h5 class="card-title">Clics</h5>
                                <h2 class="card-text" id="totalClicks">0</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stats-card">
                            <div class="card-body">
                                <h5 class="card-title">Fallidos</h5>
                                <h2 class="card-text" id="totalFailed">0</h2>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Activity Chart -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0">Actividad por Día</h5>
                                    <div class="date-filter-wrapper">
                                        <div class="d-flex flex-column flex-md-row gap-2 align-items-start align-items-md-center">
                                            <div class="d-flex flex-column flex-sm-row gap-2 align-items-start align-items-sm-center">
                                                <input type="date" id="startDate" class="form-control form-control-sm date-input" placeholder="Fecha inicio">
                                                <span class="date-separator">a</span>
                                                <input type="date" id="endDate" class="form-control form-control-sm date-input" placeholder="Fecha fin">
                                            </div>
                                            <div class="d-flex gap-2 mt-2 mt-sm-0">
                                                <button onclick="loadDailyStats()" class="btn btn-primary btn-sm">
                                                    <i class="fas fa-search"></i> <span class="btn-text">Filtrar</span>
                                                </button>
                                                <button onclick="resetDateFilter()" class="btn btn-outline-secondary btn-sm">
                                                    <i class="fas fa-undo"></i> <span class="btn-text">Resetear</span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="chart-container">
                                    <canvas id="activityChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Email Status Filter -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0">Filtrar Correos por Estado</h5>
                                    <div class="d-flex flex-column flex-sm-row gap-2">
                                        <select id="statusFilter" class="form-select form-select-sm" style="min-width: 150px;">
                                            <option value="all">Todos los estados</option>
                                            <option value="pending">Pendientes</option>
                                            <option value="sent">Enviados</option>
                                            <option value="failed">Fallidos</option>
                                            <option value="scheduled">Programados</option>
                                        </select>
                                        <div class="d-flex gap-2">
                                            <button onclick="loadEmailsByStatus()" class="btn btn-primary btn-sm">
                                                <i class="fas fa-filter"></i> <span class="btn-text">Filtrar</span>
                                            </button>
                                            <button onclick="resetStatusFilter()" class="btn btn-outline-secondary btn-sm">
                                                <i class="fas fa-undo"></i> <span class="btn-text">Limpiar</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="table-responsive">
                                    <table class="table table-hover" id="emailsTable">
                                        <thead>
                                            <tr>
                                                <th class="d-none d-lg-table-cell">Destinatario</th>
                                                <th>Asunto</th>
                                                <th class="d-none d-md-table-cell">Estado</th>
                                                <th class="d-none d-lg-table-cell">Fecha</th>
                                                <th class="d-none d-md-table-cell">Abierto</th>
                                                <th class="text-center">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Modal para vista previa del correo -->
    <div class="modal fade" id="emailPreviewModal" tabindex="-1" aria-labelledby="emailPreviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="emailPreviewModalLabel">Vista Previa del Correo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="email-preview-container">
                                <div id="emailPreviewLoading" class="modal-loading">
                                    <i class="fas fa-spinner"></i>
                                    <p>Cargando vista previa del correo...</p>
                                </div>
                                <iframe id="emailPreviewFrame" style="width: 100%; height: 600px; border: 1px solid #dee2e6; border-radius: 8px; display: none;"></iframe>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="email-details">
                                <h6>Detalles del Correo</h6>
                                <div id="emailDetailsLoading" class="modal-loading">
                                    <i class="fas fa-spinner"></i>
                                    <p>Cargando detalles...</p>
                                </div>
                                <div id="emailDetailsContent" style="display: none;">
                                    <div class="detail-item">
                                        <strong>Destinatario:</strong>
                                        <span id="emailDetailTo"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Asunto:</strong>
                                        <span id="emailDetailSubject"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Estado:</strong>
                                        <span id="emailDetailStatus"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Fecha de Creación:</strong>
                                        <span id="emailDetailCreated"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Fecha de Envío:</strong>
                                        <span id="emailDetailSent"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Programado para:</strong>
                                        <span id="emailDetailScheduled"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Abierto:</strong>
                                        <span id="emailDetailOpened"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Cliente:</strong>
                                        <span id="emailDetailCustomer"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Oferta:</strong>
                                        <span id="emailDetailOffer"></span>
                                    </div>
                                    <div class="detail-item">
                                        <strong>Precio:</strong>
                                        <span id="emailDetailPrice"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary" onclick="openEmailInNewTab()">
                        <i class="fas fa-external-link-alt"></i> Abrir en Nueva Pestaña
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <script>
        // Función para cargar las estadísticas generales
        async function loadGeneralStats() {
            try {
                const response = await fetch('/api/statistics/general');
                const data = await response.json();
                if (data.success) {
                    document.getElementById('totalSent').textContent = data.data.sent || 0;
                    document.getElementById('totalOpened').textContent = data.data.opened || 0;
                    document.getElementById('totalFailed').textContent = data.data.failed || 0;
                }
            } catch (error) {
                console.error('Error loading general stats:', error);
            }
        }

        // Función para destruir el gráfico de manera segura
        function destroyChart() {
            if (window.activityChart && typeof window.activityChart.destroy === 'function') {
                window.activityChart.destroy();
                window.activityChart = null;
            }
        }

        // Función para cargar las estadísticas diarias
        async function loadDailyStats() {
            try {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                let url = '/api/statistics/daily?days=7';
                if (startDate && endDate) {
                    url = `/api/statistics/daily?startDate=${startDate}&endDate=${endDate}`;
                } else if (startDate) {
                    url = `/api/statistics/daily?startDate=${startDate}`;
                } else if (endDate) {
                    url = `/api/statistics/daily?endDate=${endDate}`;
                }

                const response = await fetch(url);
                const data = await response.json();
                if (data.success) {
                    const dates = data.data.map(item => item.date);
                    const sent = data.data.map(item => item.sent);
                    const opened = data.data.map(item => item.opened);
                    const failed = data.data.map(item => item.failed);

                    // Destruir el gráfico existente si existe
                    destroyChart();

                    const ctx = document.getElementById('activityChart');
                    if (!ctx) {
                        console.error('Canvas element not found');
                        return;
                    }

                    window.activityChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: dates,
                            datasets: [
                                {
                                    label: 'Enviados',
                                    data: sent,
                                    borderColor: 'rgb(75, 192, 192)',
                                    backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                    tension: 0.1,
                                    fill: true
                                },
                                {
                                    label: 'Abiertos',
                                    data: opened,
                                    borderColor: 'rgb(255, 99, 132)',
                                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                    tension: 0.1,
                                    fill: true
                                },
                                {
                                    label: 'Fallidos',
                                    data: failed,
                                    borderColor: 'rgb(255, 159, 64)',
                                    backgroundColor: 'rgba(255, 159, 64, 0.1)',
                                    tension: 0.1,
                                    fill: true
                                },
                                {
                                    label: 'Clics',
                                    data: data.data.map(item => item.clicks),
                                    borderColor: 'rgb(54, 162, 235)',
                                    backgroundColor: 'rgba(54, 162, 235, 0.1)',
                                    tension: 0.1,
                                    fill: true
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            },
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                tooltip: {
                                    mode: 'index',
                                    intersect: false
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: 'Cantidad'
                                    }
                                },
                                x: {
                                    title: {
                                        display: true,
                                        text: 'Fecha'
                                    }
                                }
                            }
                        }
                    });
                } else {
                    console.error('Error in API response:', data.error || 'Unknown error');
                }
            } catch (error) {
                console.error('Error loading daily stats:', error);
            }
        }

        // Función para resetear el filtro de fechas
        function resetDateFilter() {
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            loadDailyStats();
        }

        // Función para cargar los correos programados
        async function loadScheduledEmails() {
            try {
                const response = await fetch('/api/statistics/scheduled');
                const data = await response.json();
                if (data.success) {
                    const tbody = document.querySelector('#scheduledEmailsTable tbody');
                    tbody.innerHTML = '';
                    
                    data.data.forEach(email => {
                        const tr = document.createElement('tr');
                        const isMobile = window.innerWidth < 768;
                        
                        tr.innerHTML = `
                            <td class="d-none d-md-table-cell">${email.to}</td>
                            <td>
                                <div class="email-info">
                                    <div class="email-subject">${email.subject}</div>
                                    ${isMobile ? `<small class="text-muted d-block">${email.to}</small>` : ''}
                                </div>
                            </td>
                            <td class="d-none d-md-table-cell">${new Date(email.scheduledFor).toLocaleString()}</td>
                            <td>
                                <button onclick="cancelScheduledEmail('${email.id}')" class="btn btn-sm btn-danger">
                                    <i class="fas fa-times"></i>
                                    <span class="d-none d-sm-inline">Cancelar</span>
                                </button>
                            </td>
                        `;
                        tbody.appendChild(tr);
                    });
                }
            } catch (error) {
                console.error('Error loading scheduled emails:', error);
            }
        }

        // Función para cancelar un correo programado
        async function cancelScheduledEmail(emailId) {
            if (confirm('¿Está seguro de que desea cancelar este correo programado?')) {
                try {
                    const response = await fetch(`/api/statistics/scheduled/${emailId}`, {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert('Correo cancelado exitosamente.');
                        loadScheduledEmails(); // Recargar la tabla de correos programados
                    } else {
                        alert('Error al cancelar el correo: ' + (data.message || ''));
                    }
                } catch (error) {
                    console.error('Error cancelling scheduled email:', error);
                    alert('Error al cancelar el correo.');
                }
            }
        }

        // Función para cargar correos por estado
        async function loadEmailsByStatus() {
            try {
                const status = document.getElementById('statusFilter').value;
                const response = await fetch(`/api/statistics/emails?status=${status}`);
                const data = await response.json();
                
                if (data.success) {
                    const tbody = document.querySelector('#emailsTable tbody');
                    tbody.innerHTML = '';
                    
                    if (data.data.length === 0) {
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center py-5">
                                    <div class="empty-state">
                                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                        <h6 class="text-muted">No se encontraron correos</h6>
                                        <p class="text-muted small">No hay correos con el estado seleccionado</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                        return;
                    }
                    
                    data.data.forEach(email => {
                        const tr = document.createElement('tr');
                        const isMobile = window.innerWidth < 768;
                        
                        // Determinar el badge del estado
                        let statusBadge = '';
                        switch(email.status) {
                            case 'sent':
                                statusBadge = '<span class="badge bg-success">Enviado</span>';
                                break;
                            case 'pending':
                                statusBadge = '<span class="badge bg-warning text-dark">Pendiente</span>';
                                break;
                            case 'failed':
                                statusBadge = '<span class="badge bg-danger">Fallido</span>';
                                break;
                            case 'scheduled':
                                statusBadge = '<span class="badge bg-info">Programado</span>';
                                break;
                            default:
                                statusBadge = `<span class="badge bg-secondary">${email.status}</span>`;
                        }
                        
                        // Formatear la fecha
                        let displayDate = '';
                        if (email.sentAt) {
                            displayDate = new Date(email.sentAt).toLocaleString();
                        } else if (email.scheduledFor) {
                            displayDate = new Date(email.scheduledFor).toLocaleString();
                        } else {
                            displayDate = new Date(email.createdAt).toLocaleString();
                        }
                        
                        // Icono de apertura
                        const openedIcon = email.trackingOpened ? 
                            '<i class="fas fa-eye text-success" title="Correo abierto"></i>' : 
                            '<i class="fas fa-eye-slash text-muted" title="Correo no abierto"></i>';
                        
                        tr.innerHTML = `
                            <td class="d-none d-lg-table-cell">
                                <div class="text-truncate" style="max-width: 200px;" title="${email.to}">
                                    ${email.to}
                                </div>
                            </td>
                            <td>
                                <div class="email-info">
                                    <div class="email-subject text-truncate" style="max-width: 300px;" title="${email.subject}">
                                        ${email.subject}
                                    </div>
                                    <div class="email-mobile-details d-block d-lg-none">
                                        <small class="text-muted d-block">${email.to}</small>
                                        <small class="text-muted d-block">${displayDate}</small>
                                        <div class="mt-1">
                                            ${statusBadge}
                                            <span class="ms-2">${openedIcon}</span>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="d-none d-md-table-cell">
                                ${statusBadge}
                            </td>
                            <td class="d-none d-lg-table-cell">
                                <small class="text-muted">${displayDate}</small>
                            </td>
                            <td class="d-none d-md-table-cell text-center">
                                ${openedIcon}
                            </td>
                            <td class="text-center">
                                <div class="btn-group btn-group-sm" role="group">
                                    <button onclick="viewEmailDetails('${email.id}')" class="btn btn-outline-primary btn-sm" title="Ver detalles">
                                        <i class="fas fa-eye"></i>
                                        <span class="d-none d-sm-inline">Ver</span>
                                    </button>
                                    ${email.status === 'scheduled' ? 
                                        `<button onclick="cancelScheduledEmail('${email.id}')" class="btn btn-outline-danger btn-sm" title="Cancelar">
                                            <i class="fas fa-times"></i>
                                            <span class="d-none d-sm-inline">Cancelar</span>
                                        </button>` : ''
                                    }
                                </div>
                            </td>
                        `;
                        tbody.appendChild(tr);
                    });
                }
            } catch (error) {
                console.error('Error loading emails by status:', error);
                const tbody = document.querySelector('#emailsTable tbody');
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="empty-state">
                                <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                                <h6 class="text-danger">Error al cargar los correos</h6>
                                <p class="text-muted small">Intenta de nuevo más tarde</p>
                            </div>
                        </td>
                    </tr>
                `;
            }
        }

        // Función para resetear el filtro de estado
        function resetStatusFilter() {
            document.getElementById('statusFilter').value = 'all';
            loadEmailsByStatus();
        }

        // Función para ver detalles del correo
        async function viewEmailDetails(emailId) {
            try {
                // Mostrar loading en el modal
                const modal = new bootstrap.Modal(document.getElementById('emailPreviewModal'));
                modal.show();
                
                // Mostrar estados de carga
                document.getElementById('emailPreviewLoading').style.display = 'block';
                document.getElementById('emailPreviewFrame').style.display = 'none';
                document.getElementById('emailDetailsLoading').style.display = 'block';
                document.getElementById('emailDetailsContent').style.display = 'none';

                // Cargar detalles del correo
                const response = await fetch(`/api/statistics/emails/${emailId}`);
                const data = await response.json();
                
                if (data.success) {
                    const email = data.data;
                    
                    // Ocultar loading de detalles y mostrar contenido
                    document.getElementById('emailDetailsLoading').style.display = 'none';
                    document.getElementById('emailDetailsContent').style.display = 'block';
                    
                    // Actualizar detalles en el sidebar
                    document.getElementById('emailDetailTo').textContent = email.to;
                    document.getElementById('emailDetailSubject').textContent = email.subject;
                    
                    // Estado con badge
                    let statusBadge = '';
                    switch(email.status) {
                        case 'sent':
                            statusBadge = '<span class="badge bg-success">Enviado</span>';
                            break;
                        case 'pending':
                            statusBadge = '<span class="badge bg-warning text-dark">Pendiente</span>';
                            break;
                        case 'failed':
                            statusBadge = '<span class="badge bg-danger">Fallido</span>';
                            break;
                        case 'scheduled':
                            statusBadge = '<span class="badge bg-info">Programado</span>';
                            break;
                        default:
                            statusBadge = `<span class="badge bg-secondary">${email.status}</span>`;
                    }
                    document.getElementById('emailDetailStatus').innerHTML = statusBadge;
                    
                    // Fechas
                    document.getElementById('emailDetailCreated').textContent = new Date(email.createdAt).toLocaleString();
                    document.getElementById('emailDetailSent').textContent = email.sentAt ? new Date(email.sentAt).toLocaleString() : 'No enviado';
                    document.getElementById('emailDetailScheduled').textContent = email.scheduledFor ? new Date(email.scheduledFor).toLocaleString() : 'No programado';
                    
                    // Estado de apertura
                    document.getElementById('emailDetailOpened').innerHTML = email.trackingOpened ? 
                        '<i class="fas fa-eye text-success"></i> Abierto' : 
                        '<i class="fas fa-eye-slash text-muted"></i> No abierto';
                    
                    // Información del cliente y oferta
                    document.getElementById('emailDetailCustomer').textContent = email.customerName;
                    document.getElementById('emailDetailOffer').textContent = email.offerTitle;
                    document.getElementById('emailDetailPrice').textContent = email.offerPrice ? `$${email.offerPrice}` : 'No especificado';
                    
                    // Cargar vista previa del HTML
                    const previewUrl = `/api/statistics/emails/${emailId}/preview`;
                    const iframe = document.getElementById('emailPreviewFrame');
                    
                    iframe.onload = function() {
                        // Ocultar loading y mostrar iframe cuando se cargue
                        document.getElementById('emailPreviewLoading').style.display = 'none';
                        iframe.style.display = 'block';
                    };
                    
                    iframe.src = previewUrl;
                    
                    // Guardar el emailId para el botón "Abrir en Nueva Pestaña"
                    window.currentEmailId = emailId;
                    
                } else {
                    throw new Error(data.error || 'Error al cargar los detalles del correo');
                }
            } catch (error) {
                console.error('Error loading email details:', error);
                alert('Error al cargar los detalles del correo: ' + error.message);
                
                // Cerrar modal en caso de error
                const modal = bootstrap.Modal.getInstance(document.getElementById('emailPreviewModal'));
                if (modal) {
                    modal.hide();
                }
            }
        }

        // Función para abrir el correo en una nueva pestaña
        function openEmailInNewTab() {
            if (window.currentEmailId) {
                const previewUrl = `/api/statistics/emails/${window.currentEmailId}/preview`;
                window.open(previewUrl, '_blank');
            }
        }

        // Cargar datos al cargar la página
        window.addEventListener('load', () => {
            // Inicializar variables globales
            window.activityChart = null;
            
            // Cargar datos con manejo de errores
            Promise.all([
                loadGeneralStats().catch(error => console.error('Error loading general stats:', error)),
                loadDailyStats().catch(error => console.error('Error loading daily stats:', error)),
                loadScheduledEmails().catch(error => console.error('Error loading scheduled emails:', error)),
                loadEmailsByStatus().catch(error => console.error('Error loading emails by status:', error))
            ]).then(() => {
                console.log('Dashboard loaded successfully');
            }).catch(error => {
                console.error('Error loading dashboard:', error);
            });
        });

        // Listener para redimensionamiento de ventana
        window.addEventListener('resize', () => {
            // Recargar las tablas cuando cambie el tamaño de pantalla
            loadScheduledEmails();
            loadEmailsByStatus();
        });
    </script>
</body>
</html> 