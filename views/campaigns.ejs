<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Campañas - HAMSE</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">
    <link href="/css/dashboard.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/dashboard">
                                <i class="fas fa-chart-bar"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/enviar">
                                <i class="fas fa-paper-plane"></i> Enviar Ofertas
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active" href="/campaigns">
                                <i class="fas fa-bullhorn"></i> Campañas
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2"><i class="fas fa-bullhorn"></i> Campañas</h1>
                    <span id="systemClock" class="badge bg-dark fs-6"></span>
                </div>
                <script>
                    function updateClock() {
                        const now = new Date();
                        const options = {
                            year: 'numeric', month: '2-digit', day: '2-digit',
                            hour: '2-digit', minute: '2-digit', second: '2-digit',
                            hour12: true
                        };
                        document.getElementById('systemClock').textContent = now.toLocaleString('es-MX', options);
                    }
                    setInterval(updateClock, 1000);
                    updateClock();
                </script>

                <div class="campaigns-container">
                    <div class="campaigns-list">
                        <h2 class="h5 mb-3">Campañas Activas</h2>
                        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                            <% campaigns.forEach(campaign => { %>
                                <div class="col">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h5 class="card-title mb-0"><%= campaign.name %></h5>
                                                <span class="badge <%= campaign.status === 'active' ? 'bg-success' : 'bg-warning' %>">
                                                    <%= campaign.status === 'active' ? 'Activa' : 'Pausada' %>
                                                </span>
                                            </div>
                                            <div class="row mb-3 text-muted small">
                                                <div class="col-6">
                                                    <i class="fas fa-envelope"></i> Total: <%= campaign.totalEmails %>
                                                </div>
                                                <div class="col-6">
                                                    <i class="fas fa-paper-plane"></i> Enviados: <%= campaign.sentEmails %>
                                                </div>
                                                <div class="col-6">
                                                    <i class="fas fa-envelope-open"></i> Abiertos: <%= campaign.openedEmails %>
                                                </div>
                                                <div class="col-6">
                                                    <i class="fas fa-mouse-pointer"></i> Clics: <%= campaign.clickedEmails %>
                                                </div>
                                            </div>
                                            <p class="card-text text-muted small"><strong>Descripción:</strong> <%= campaign.description %></p>
                                            <p class="card-text text-muted small"><strong>Creada:</strong> <%= new Date(campaign.createdAt).toLocaleString() %></p>
                                            <% if (campaign.scheduledFor) { %>
                                                <p class="card-text text-muted small">
                                                    <strong>Programada para:</strong> 
                                                    <span class="text-primary">
                                                        <%= new Date(campaign.scheduledFor).toLocaleString() %>
                                                    </span>
                                                </p>
                                            <% } %>
                                        </div>
                                        <div class="card-footer d-flex justify-content-between">
                                            <button onclick="viewCampaignEmails('<%= campaign.id %>')" class="btn btn-sm btn-info">
                                                <i class="fas fa-envelope"></i> Ver Correos
                                            </button>
                                            <div class="btn-group">
                                                <% if (campaign.status === 'active') { %>
                                                    <button onclick="pauseCampaign('<%= campaign.id %>')" class="btn btn-sm btn-warning">
                                                        <i class="fas fa-pause"></i>
                                                    </button>
                                                <% } else { %>
                                                    <button onclick="resumeCampaign('<%= campaign.id %>')" class="btn btn-sm btn-success">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                <% } %>
                                                <button onclick="editSchedule('<%= campaign.id %>', '<%= campaign.scheduledFor %>')" class="btn btn-sm btn-primary">
                                                    <i class="fas fa-clock"></i>
                                                </button>
                                                <button onclick="sendNow('<%= campaign.id %>')" class="btn btn-sm btn-secondary">
                                                    <i class="fas fa-paper-plane"></i>
                                                </button>
                                                <button onclick="deleteCampaign('<%= campaign.id %>')" class="btn btn-sm btn-danger">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Modal para ver correos de la campaña -->
    <div id="emailsModal" class="modal fade" tabindex="-1" aria-labelledby="emailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="emailsModalLabel">Correos de la Campaña</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="campaignEmailsTable">
                            <thead>
                                <tr>
                                    <th class="d-none d-lg-table-cell">Destinatario</th>
                                    <th>Asunto</th>
                                    <th class="d-none d-md-table-cell">Estado</th>
                                    <th class="d-none d-lg-table-cell">Enviado</th>
                                    <th class="d-none d-md-table-cell">Abierto</th>
                                    <th class="text-center">Acciones</th>
                                </tr>
                            </thead>
                            <tbody id="emailsTableBody">
                                <!-- Los correos se cargarán aquí dinámicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para editar programación -->
    <div class="modal fade" id="scheduleModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Programar Campaña</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="scheduleForm">
                        <input type="hidden" id="campaignId" name="campaignId">
                        <div class="mb-3">
                            <label for="scheduledDate" class="form-label">Fecha de envío:</label>
                            <input type="date" class="form-control" id="scheduledDate" name="scheduledDate" required>
                        </div>
                        <div class="mb-3">
                            <label for="scheduledTime" class="form-label">Hora de envío:</label>
                            <input type="time" class="form-control" id="scheduledTime" name="scheduledTime" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" onclick="saveSchedule()">Guardar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentCampaignId = null;

        async function viewCampaignEmails(campaignId) {
            currentCampaignId = campaignId;
            try {
                const response = await fetch(`/api/campaigns/${campaignId}/emails`);
                const emails = await response.json();
                
                const tbody = document.getElementById('emailsTableBody');
                
                if (emails.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-5">
                                <div class="empty-state">
                                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                    <h6 class="text-muted">No hay correos</h6>
                                    <p class="text-muted small">Esta campaña no tiene correos asociados</p>
                                </div>
                            </td>
                        </tr>
                    `;
                } else {
                    tbody.innerHTML = emails.map(email => {
                        // Determinar el badge del estado
                        let statusBadge = '';
                        switch(email.status) {
                            case 'sent':
                                statusBadge = '<span class="badge bg-success">Enviado</span>';
                                break;
                            case 'pending':
                                statusBadge = '<span class="badge bg-warning text-dark">Pendiente</span>';
                                break;
                            case 'failed':
                                statusBadge = '<span class="badge bg-danger">Fallido</span>';
                                break;
                            case 'scheduled':
                                statusBadge = '<span class="badge bg-info">Programado</span>';
                                break;
                            default:
                                statusBadge = `<span class="badge bg-secondary">${email.status}</span>`;
                        }
                        
                        // Formatear fechas
                        const sentDate = email.sentAt ? new Date(email.sentAt).toLocaleString() : '-';
                        const scheduledDate = email.scheduledFor ? new Date(email.scheduledFor).toLocaleString() : '-';
                        
                        // Icono de apertura
                        const openedIcon = email.trackingOpened ? 
                            '<i class="fas fa-eye text-success" title="Correo abierto"></i>' : 
                            '<i class="fas fa-eye-slash text-muted" title="Correo no abierto"></i>';
                        
                        return `
                            <tr>
                                <td class="d-none d-lg-table-cell">
                                    <div class="text-truncate" style="max-width: 200px;" title="${email.to}">
                                        ${email.to}
                                    </div>
                                </td>
                                <td>
                                    <div class="email-info">
                                        <div class="email-subject text-truncate" style="max-width: 300px;" title="${email.subject}">
                                            ${email.subject}
                                        </div>
                                        <div class="email-mobile-details d-block d-lg-none">
                                            <small class="text-muted d-block">${email.to}</small>
                                            <small class="text-muted d-block">Enviado: ${sentDate}</small>
                                            <div class="mt-1">
                                                ${statusBadge}
                                                <span class="ms-2">${openedIcon}</span>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="d-none d-md-table-cell">
                                    ${statusBadge}
                                </td>
                                <td class="d-none d-lg-table-cell">
                                    <small class="text-muted">${sentDate}</small>
                                </td>
                                <td class="d-none d-md-table-cell text-center">
                                    ${openedIcon}
                                </td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button onclick="resendEmail('${email.id}')" class="btn btn-outline-info btn-sm" title="Reenviar">
                                            <i class="fas fa-redo"></i>
                                            <span class="d-none d-sm-inline">Reenviar</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                    }).join('');
                }

                const emailsModal = new bootstrap.Modal(document.getElementById('emailsModal'));
                emailsModal.show();
            } catch (error) {
                console.error('Error al cargar los correos:', error);
                const tbody = document.getElementById('emailsTableBody');
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="empty-state">
                                <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                                <h6 class="text-danger">Error al cargar los correos</h6>
                                <p class="text-muted small">Intenta de nuevo más tarde</p>
                            </div>
                        </td>
                    </tr>
                `;
            }
        }

        async function editSchedule(campaignId, currentSchedule) {
            document.getElementById('campaignId').value = campaignId;
            
            if (currentSchedule) {
                const date = new Date(currentSchedule);
                document.getElementById('scheduledDate').value = date.toISOString().split('T')[0];
                document.getElementById('scheduledTime').value = date.toTimeString().slice(0, 5);
            } else {
                document.getElementById('scheduledDate').value = '';
                document.getElementById('scheduledTime').value = '';
            }

            const scheduleModal = new bootstrap.Modal(document.getElementById('scheduleModal'));
            scheduleModal.show();
        }

        async function saveSchedule() {
            const campaignId = document.getElementById('campaignId').value;
            const date = document.getElementById('scheduledDate').value;
            const time = document.getElementById('scheduledTime').value;

            if (!date || !time) {
                alert('Por favor complete todos los campos');
                return;
            }

            const scheduledFor = new Date(`${date}T${time}`).toISOString();

            try {
                const response = await fetch(`/api/campaigns/${campaignId}/schedule`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ scheduledFor })
                });

                const data = await response.json();
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error al programar la campaña: ' + data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al programar la campaña');
            }
        }

        async function sendNow(campaignId) {
            if (confirm('¿Está seguro que desea enviar esta campaña ahora?')) {
                try {
                    const response = await fetch(`/api/campaigns/${campaignId}/send-now`, {
                        method: 'POST'
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        alert('Campaña enviada exitosamente');
                        location.reload();
                    } else {
                        alert('Error al enviar la campaña: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al enviar la campaña');
                }
            }
        }

        async function pauseCampaign(campaignId) {
            try {
                const response = await fetch(`/api/campaigns/${campaignId}/pause`, { method: 'POST' });
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al pausar la campaña');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al pausar la campaña');
            }
        }

        async function resumeCampaign(campaignId) {
            try {
                const response = await fetch(`/api/campaigns/${campaignId}/resume`, { method: 'POST' });
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error al reanudar la campaña');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al reanudar la campaña');
            }
        }

        async function resendEmail(emailId) {
            if (confirm('¿Está seguro que desea reenviar este correo?')) {
                try {
                    const response = await fetch(`/api/campaigns/emails/${emailId}/resend`, {
                        method: 'POST'
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        alert('Correo reenviado exitosamente');
                        // Recargar los correos de la campaña actual
                        if (currentCampaignId) {
                            viewCampaignEmails(currentCampaignId);
                        }
                    } else {
                        alert('Error al reenviar el correo: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al reenviar el correo');
                }
            }
        }

        async function deleteCampaign(campaignId) {
            if (confirm('¿Está seguro de que desea eliminar esta campaña y todos sus correos asociados? Esta acción es irreversible.')) {
                try {
                    const response = await fetch(`/api/campaigns/${campaignId}`, {
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    if (data.message) {
                        alert(data.message);
                        location.reload(); // Recargar la página para actualizar la lista de campañas
                    } else {
                        alert('Error al eliminar la campaña: ' + (data.error || ''));
                    }
                } catch (error) {
                    console.error('Error al eliminar la campaña:', error);
                    alert('Error al eliminar la campaña.');
                }
            }
        }
    </script>
</body>
</html> 